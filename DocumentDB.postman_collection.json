{
	"info": {
		"name": "DocumentDB",
		"_postman_id": "671e5d3a-6a2d-816a-acaf-99b86ffbc5bd",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Databases",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b11ffa0-05c5-458c-b74f-c187d08a0344",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "93e22889-11c6-4760-92bc-8b67466f45a9",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create Database - tempdb",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c374339-7912-41ef-941d-43f24ef3deaf",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8ea4c73a-34f7-41e8-9ed3-6f114583a4ed",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{DocumentDBName}}\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get Database - tempdb",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "531d5cdd-6689-4b80-8089-80fee8105649",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b8491213-45b3-433a-8cdb-b11f71d23f41",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get All Collections",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fdd4b750-279a-40ae-b470-8bc6ad4e3690",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "15b86365-23fc-4277-bcd1-9a78a47710d8",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create Collection - tempcoll",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "74fcd59b-35a5-40ff-ab48-a85fc50b3bf0",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4037ab84-9205-444d-807c-5cf7cff838a5",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{DocumentDBColl}}\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get Collection -  tempcoll",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a6476cd1-e558-4672-bc55-3db2b0e7459a",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c1fe4217-10de-46b3-9e56-023e2b8674d1",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"tempcoll\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create Document - Wakefield Family",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f09d562a-a559-48ca-850b-a13fef643ab7",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b8126624-74ad-43a9-87df-aca1f1490e39",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get Document - Wakefield Family",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e3e79da-ffcd-48ab-8895-daaa5bd77d13",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34f69e1e-7e96-4488-a49f-d143816a10e1",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs/WakefieldFamily",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs",
						"WakefieldFamily"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Update Document - Wakefield Family",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a55041e-1f91-4e52-abd3-39beab4ccdf1",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2366fe40-520d-4701-b4f7-e0bf00ff87bb",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"WakefieldFamily\",\r\n    \"parents\": [\r\n        { \"familyName\": \"Wakefield\", \"givenName\": \"Robin\" },\r\n        { \"familyName\": \"Miller\", \"givenName\": \"Ben\" },\r\n        { \"familyName\" : \"Lindsay\", \"givenName\": \"Steve\" }\r\n    ],\r\n    \"children\": [\r\n        {\r\n            \"familyName\": \"Merriam\", \r\n            \"givenName\": \"Jesse\", \r\n            \"gender\": \"female\", \"grade\": 1,\r\n            \"pets\": [\r\n                { \"givenName\": \"Goofy\" },\r\n                { \"givenName\": \"Shadow\" }\r\n            ]\r\n        },\r\n        { \r\n            \"familyName\": \"Miller\", \r\n             \"givenName\": \"Lisa\", \r\n             \"gender\": \"female\", \r\n             \"grade\": 8 }\r\n    ],\r\n    \"address\": { \"state\": \"NY\", \"county\": \"Manhattan\", \"city\": \"NY\" },\r\n    \"creationDate\": 1431620462,\r\n    \"isRegistered\": false\r\n}"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs/WakefieldFamily",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs",
						"WakefieldFamily"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create Document - Anderson Family",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1379977b-1ccd-49b9-967e-8406175b4c61",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "48448861-9cdd-470f-9fbc-ebf7a73636e2",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"AndersenFamily\",\r\n    \"lastName\": \"Andersen\",\r\n    \"parents\": [\r\n       { \"firstName\": \"Thomas\" },\r\n       { \"firstName\": \"Mary Kay\"}\r\n    ],\r\n    \"children\": [\r\n       {\r\n           \"firstName\": \"Henriette Thaulow\", \"gender\": \"female\", \"grade\": 5,\r\n           \"pets\": [{ \"givenName\": \"Fluffy\" }]\r\n       }\r\n    ],\r\n    \"address\": { \"state\": \"WA\", \"county\": \"King\", \"city\": \"seattle\" },\r\n    \"creationDate\": 1431620472,\r\n    \"isRegistered\": true\r\n}"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get all documents",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b9f21102-c0a5-441e-9c39-87a83419e9fb",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a1d5b6af-e0b4-4191-b242-2b794a5166e8",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    query: \"SELECT * FROM c\",\r\n    parameters: []\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Query Collection Family = Anderson",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a450d58f-912c-4afa-a662-af8d0e708348",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42f3cd73-4840-42cb-9df5-524c292703a2",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "x-ms-documentdb-isquery",
						"value": "true"
					},
					{
						"key": "Content-Type",
						"value": "application/query+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{      \r\n    \"query\": \"SELECT * FROM Families f WHERE f.id = @familyId\",     \r\n    \"parameters\": [          \r\n        {\"name\": \"@familyId\", \"value\": \"AndersenFamily\"}         \r\n    ] \r\n}"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Query Collection with JOIN",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "01cc2e2b-f7ba-46bd-b2d2-89b13ec7385a",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "717e9ec9-c38e-4aef-9798-91c15b24fb83",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					},
					{
						"key": "x-ms-documentdb-isquery",
						"value": "true"
					},
					{
						"key": "Content-Type",
						"value": "application/query+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{      \r\n    \"query\": \"SELECT \r\n                 f.id AS familyName, \r\n                 c.givenName AS childGivenName, \r\n                 c.firstName AS childFirstName, \r\n                 p.givenName AS petName \r\n              FROM Families f \r\n              JOIN c IN f.children \r\n              JOIN p in c.pets\",     \r\n    \"parameters\": [] \r\n}"
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete Document",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ad948f99-b0bb-409c-9fef-a319f6ead68a",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4638cb7d-06e6-4181-b194-7521b59e2c25",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}/docs/WakefieldFamily",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}",
						"docs",
						"WakefieldFamily"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete Collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c6b794d-9485-4fa0-b7c7-6b1e484af653",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a6f979a-105e-4d54-9eea-c5fe2b6ba8be",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}/colls/{{DocumentDBColl}}",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}",
						"colls",
						"{{DocumentDBColl}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete Database",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2b7737d8-649f-40db-8974-ee563e5dace9",
						"type": "text/javascript",
						"exec": [
							"// store our master key for documentdb",
							"var mastKey = postman.getEnvironmentVariable(\"DocumentDBMasterKey\");",
							"console.log(\"mastKey = \" + mastKey);",
							"",
							"// store our date as RFC1123 format for the request",
							"var today = new Date();",
							"var UTCstring = today.toUTCString();",
							"postman.setEnvironmentVariable(\"RFC1123time\", UTCstring);",
							"",
							"// Grab the request url",
							"//var url = request.url.trim(); ",
							"var url = returnParsedUrl();",
							"console.log(\"request url = \" + url);",
							"",
							"// strip the url of the hostname up and leading slash",
							"var strippedurl = url.replace(new RegExp('^https?://[^/]+/'),'/');",
							"console.log (\"stripped Url = \" + strippedurl);",
							"",
							"// push the parts down into an array so we can determine if the call is on a specific item",
							"// or if it is on a resource (odd would mean a resource, even would mean an item)",
							"var strippedparts = strippedurl.split(\"/\");",
							"var truestrippedcount = (strippedparts.length - 1);",
							"console.log(truestrippedcount);",
							"",
							"// define resourceId/Type now so we can assign based on the amount of levels",
							"var resourceId = \"\";",
							"var resType = \"\";",
							"",
							"// its odd (resource request)",
							"if (truestrippedcount % 2)",
							"{",
							"    console.log(\"odd\");",
							"    // assign resource type to the last part we found.",
							"    resType = strippedparts[truestrippedcount];",
							"    console.log(resType);",
							"    ",
							"    if (truestrippedcount > 1)",
							"    {",
							"        // now pull out the resource id by searching for the last slash and substringing to it.",
							"        var lastPart = strippedurl.lastIndexOf(\"/\");",
							"        resourceId = strippedurl.substring(1,lastPart);",
							"        console.log(resourceId);",
							"    }",
							"}",
							"else // its even (item request on resource)",
							"{",
							"    console.log(\"even\");",
							"    // assign resource type to the part before the last we found (last is resource id)",
							"    resType = strippedparts[truestrippedcount - 1];",
							"    console.log(\"resType\");",
							"    // finally remove the leading slash which we used to find the resource if it was",
							"    // only one level deep.",
							"    strippedurl = strippedurl.substring(1);",
							"    console.log(\"strippedurl\");",
							"    // assign our resourceId",
							"    resourceId = strippedurl;",
							"    console.log(\"resourceId\");",
							"}",
							"",
							"// assign our verb",
							"var verb = request.method.toLowerCase();",
							"",
							"// assign our RFC 1123 date",
							"var date = UTCstring.toLowerCase();",
							"",
							"// parse our master key out as base64 encoding",
							"var key = CryptoJS.enc.Base64.parse(mastKey);",
							"console.log(\"key = \" + key);",
							"",
							"// build up the request text for the signature so can sign it along with the key",
							"var text = (verb || \"\").toLowerCase() + \"\\n\" + ",
							"               (resType || \"\").toLowerCase() + \"\\n\" + ",
							"               (resourceId || \"\") + \"\\n\" + ",
							"               (date || \"\").toLowerCase() + \"\\n\" + ",
							"               \"\" + \"\\n\";",
							"console.log(\"text = \" + text);",
							"",
							"// create the signature from build up request text",
							"var signature = CryptoJS.HmacSHA256(text, key);",
							"console.log(\"sig = \" + signature);",
							"",
							"// back to base 64 bits",
							"var base64Bits = CryptoJS.enc.Base64.stringify(signature);",
							"console.log(\"base64bits = \" + base64Bits);",
							"",
							"// format our authentication token and URI encode it.",
							"var MasterToken = \"master\";",
							"var TokenVersion = \"1.0\";",
							"auth = encodeURIComponent(\"type=\" + MasterToken + \"&ver=\" + TokenVersion + \"&sig=\" + base64Bits);",
							"console.log(\"auth = \" + auth);",
							"",
							"// set our auth token enviornmental variable.",
							"postman.setEnvironmentVariable(\"authToken\", auth);",
							"",
							"",
							"function returnParsedUrl(){",
							"    var url = request.url.trim(); ",
							"    console.log(\"request url = \" + url);",
							"    var firstArray = url.split('{{');",
							"    var listOfProperties = [\"\"];",
							"    for(i=1;i < firstArray.length; i++){",
							"        listOfProperties[i-1] = firstArray[i].substring(0,firstArray[i].indexOf(\"}}\"));",
							"    }",
							"    var completeUrl =\"\";",
							"    for(i=0;i < firstArray.length; i++){",
							"        if(firstArray[i].includes(\"}}\")){",
							"            completeUrl += firstArray[i].replace(listOfProperties[i-1]+\"}}\",postman.getEnvironmentVariable(listOfProperties[i-1]));",
							"        }else{",
							"            completeUrl += firstArray[i];",
							"        }",
							"    }",
							"    console.log(\"completeUrl =\" +completeUrl);",
							"    return completeUrl;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "085e4286-c6a2-4ed6-bb23-d48722af42b8",
						"type": "text/javascript",
						"exec": [
							"postman.clearEnvironmentVariable(\"RFC1123time\");",
							"postman.clearEnvironmentVariable(\"masterKey\");",
							"postman.clearEnvironmentVariable(\"authToken\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-ms-version",
						"value": "2016-07-11"
					},
					{
						"key": "Authorization",
						"value": "{{authToken}}"
					},
					{
						"key": "x-ms-date",
						"value": "{{RFC1123time}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DocumentDBHost}}/dbs/{{DocumentDBName}}",
					"protocol": "https",
					"host": [
						"{{DocumentDBHost}}"
					],
					"path": [
						"dbs",
						"{{DocumentDBName}}"
					]
				},
				"description": ""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "69de4eb4-9920-4297-bc73-596b5a9f3029",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d0c095a8-ad2c-49fe-8358-161a1f7120ea",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}